# ADB File System Manager - 실행계획

## 프로젝트 개요
tkinter와 adb를 이용하여 연결된 Android 디바이스의 파일을 관리할 수 있는 GUI 애플리케이션 개발

## 주요 기능
- [x] 연결된 adb 디바이스 목록 표시
- [x] 디바이스 파일 시스템 탐색 (ls 명령어)
- [x] 로컬 파일 시스템으로 파일 다운로드 (adb pull)
- [x] 로컬 파일을 디바이스로 업로드 (adb push)
- [x] 파일 전송 진행률 표시
- [x] 에러 처리 및 사용자 피드백

## 개발 단계

### 1단계: 프로젝트 구조 설정
- [x] 기본 프로젝트 구조 생성
- [x] 필요한 Python 모듈 분리
- [x] 의존성 관리 (pyproject.toml)

### 2단계: ADB 명령어 래퍼 구현
- [x] adb_manager.py: adb 명령어 래퍼 클래스
  - [x] 디바이스 연결 상태 확인
  - [x] 파일 리스트 가져오기 (ls)
  - [x] 파일 다운로드 (pull)
  - [x] 파일 업로드 (push)
  - [x] 에러 처리

### 3단계: 파일 관리 로직 구현
- [x] file_manager.py: 파일 전송 로직
  - [x] 파일 전송 진행률 추적
  - [x] 파일 크기 계산
  - [x] 전송 상태 관리

### 4단계: GUI 구현
- [x] main.py: tkinter GUI 애플리케이션
  - [x] 디바이스 연결 상태 표시
  - [x] 파일 리스트 트리뷰
  - [x] 로컬 경로 선택
  - [x] 다운로드/업로드 버튼
  - [x] 진행률 표시바
  - [x] 로그 출력 영역

### 5단계: 통합 및 테스트
- [x] 모든 컴포넌트 통합
- [x] 에러 처리 및 예외 상황 대응
- [x] 사용자 인터페이스 최적화
- [x] 성능 테스트

## 기술 스택
- Python 3.9+
- tkinter (GUI)
- subprocess (adb 명령어 실행)
- threading (비동기 파일 전송)

## 파일 구조
```
adb-fs/
├── main.py              # 메인 GUI 애플리케이션
├── adb_manager.py       # adb 명령어 래퍼
├── file_manager.py      # 파일 전송 로직
├── utils.py            # 유틸리티 함수
├── pyproject.toml      # 프로젝트 설정
├── .todo              # 실행계획
├── .mdc               # 프로젝트 문서
└── README.md          # 프로젝트 설명
```

## 우선순위
1. 높음: 기본 GUI 및 adb 연결
2. 높음: 파일 리스트 표시
3. 중간: 파일 다운로드/업로드
4. 중간: 진행률 표시
5. 낮음: 고급 기능 (폴더 동기화, 배치 작업)

## 완료 조건
- [x] adb 디바이스 연결 및 파일 리스트 표시
- [x] 파일 다운로드/업로드 기능
- [x] 사용자 친화적인 GUI
- [x] 에러 처리 및 피드백
- [x] 프로젝트 문서화


# 이후 개발할 사항
- [ ] adb pair로 연결하기 추가
- [ ] 파일 드래그 앤 드롭으로 업로드 추가
- [ ] 파일 드래그 앤 드롭으로 다운로드 추가
